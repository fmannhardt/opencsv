Index: src/main/java/au/com/bytecode/opencsv/CSVParser.java
===================================================================
--- src/main/java/au/com/bytecode/opencsv/CSVParser.java	(revision 117)
+++ src/main/java/au/com/bytecode/opencsv/CSVParser.java	(working copy)
@@ -70,6 +70,7 @@
     final boolean ignoreQuotations;
     private String pending;
     private boolean inField = false;
+	private int lastColumnCount = -1;
 
     /**
      * Constructs CSVParser using a comma for the separator.
@@ -209,7 +210,13 @@
             }
         }
 
-        List<String> tokensOnThisLine = new ArrayList<String>();
+        List<String> tokensOnThisLine;
+        if (lastColumnCount != -1) {        	
+			tokensOnThisLine = new ArrayList<String>(lastColumnCount);	
+        } else {
+        	tokensOnThisLine = new ArrayList<String>();
+        }
+        
         StringBuilder sb = new StringBuilder(INITIAL_READ_SIZE);
         boolean inQuotes = false;
         if (pending != null) {
@@ -251,8 +258,13 @@
                 }
                 inField = !inField;
             } else if (c == separator && !(inQuotes && !ignoreQuotations)) {
-                tokensOnThisLine.add(sb.toString());
-                sb = new StringBuilder(INITIAL_READ_SIZE); // start work on next token
+            	if (sb.length() == 0) {
+            		// Just add the empty String and re-use the StringBuilder for the next token
+            		tokensOnThisLine.add("");
+            	} else {
+                    tokensOnThisLine.add(sb.toString());
+                    sb = new StringBuilder(INITIAL_READ_SIZE); // start work on next token            		
+            	}
                 inField = false;
             } else {
                 if (!strictQuotes || (inQuotes && !ignoreQuotations)) {
@@ -275,6 +287,7 @@
         if (sb != null) {
             tokensOnThisLine.add(sb.toString());
         }
+        lastColumnCount = tokensOnThisLine.size();
         return tokensOnThisLine.toArray(new String[tokensOnThisLine.size()]);
 
     }
Index: src/main/java/au/com/bytecode/opencsv/CSVReader.java
===================================================================
--- src/main/java/au/com/bytecode/opencsv/CSVReader.java	(revision 117)
+++ src/main/java/au/com/bytecode/opencsv/CSVReader.java	(working copy)
@@ -136,7 +136,7 @@
     public CSVReader(Reader reader, char separator, char quotechar, char escape, int line, boolean strictQuotes) {
         this(reader, separator, quotechar, escape, line, strictQuotes, CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE);
     }
-
+    
     /**
      * Constructs CSVReader with supplied separator and quote char.
      *
@@ -149,9 +149,26 @@
      * @param ignoreLeadingWhiteSpace it true, parser should ignore white space before a quote in a field
      */
     public CSVReader(Reader reader, char separator, char quotechar, char escape, int line, boolean strictQuotes, boolean ignoreLeadingWhiteSpace) {
+        this(reader, separator, quotechar, escape, line, strictQuotes, ignoreLeadingWhiteSpace, CSVParser.DEFAULT_IGNORE_QUOTATIONS);
+    }
+
+
+    /**
+     * Constructs CSVReader with supplied separator and quote char.
+     *
+     * @param reader                  the reader to an underlying CSV source.
+     * @param separator               the delimiter to use for separating entries
+     * @param quotechar               the character to use for quoted elements
+     * @param escape                  the character to use for escaping a separator or quote
+     * @param line                    the line number to skip for start reading
+     * @param strictQuotes            sets if characters outside the quotes are ignored
+     * @param ignoreLeadingWhiteSpace it true, parser should ignore white space before a quote in a field
+     * @param ignoreQuotations 
+     */
+    public CSVReader(Reader reader, char separator, char quotechar, char escape, int line, boolean strictQuotes, boolean ignoreLeadingWhiteSpace, boolean ignoreQuotations) {
         this(reader,
                 line,
-                new CSVParser(separator, quotechar, escape, strictQuotes, ignoreLeadingWhiteSpace));
+                new CSVParser(separator, quotechar, escape, strictQuotes, ignoreLeadingWhiteSpace, ignoreQuotations));
     }
 
     /**
